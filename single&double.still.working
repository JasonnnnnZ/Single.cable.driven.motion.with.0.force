{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "b90bd6e6-0b4b-4c07-9eb2-514a141d203b",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: pyelastica[docs,examples] in /srv/conda/envs/notebook/lib/python3.10/site-packages (0.3.2)\n",
      "Requirement already satisfied: matplotlib<4.0.0,>=3.3.2 in /srv/conda/envs/notebook/lib/python3.10/site-packages (from pyelastica[docs,examples]) (3.10.3)\n",
      "Requirement already satisfied: numba<0.58.0,>=0.57.0 in /srv/conda/envs/notebook/lib/python3.10/site-packages (from pyelastica[docs,examples]) (0.57.1)\n",
      "Requirement already satisfied: numpy<2.0.0,>=1.19.2 in /srv/conda/envs/notebook/lib/python3.10/site-packages (from pyelastica[docs,examples]) (1.24.4)\n",
      "Requirement already satisfied: pyvista<0.40.0,>=0.39.1 in /srv/conda/envs/notebook/lib/python3.10/site-packages (from pyelastica[docs,examples]) (0.39.1)\n",
      "Requirement already satisfied: scipy<2.0.0,>=1.5.2 in /srv/conda/envs/notebook/lib/python3.10/site-packages (from pyelastica[docs,examples]) (1.15.3)\n",
      "Requirement already satisfied: tqdm<5.0.0,>=4.61.1 in /srv/conda/envs/notebook/lib/python3.10/site-packages (from pyelastica[docs,examples]) (4.67.1)\n",
      "Requirement already satisfied: Sphinx<7.0,>=6.1 in /srv/conda/envs/notebook/lib/python3.10/site-packages (from pyelastica[docs,examples]) (6.2.1)\n",
      "Requirement already satisfied: docutils<0.19,>=0.18 in /srv/conda/envs/notebook/lib/python3.10/site-packages (from pyelastica[docs,examples]) (0.18.1)\n",
      "Requirement already satisfied: myst-parser<2.0,>=1.0 in /srv/conda/envs/notebook/lib/python3.10/site-packages (from pyelastica[docs,examples]) (1.0.0)\n",
      "Requirement already satisfied: numpydoc<2.0.0,>=1.3.1 in /srv/conda/envs/notebook/lib/python3.10/site-packages (from pyelastica[docs,examples]) (1.8.0)\n",
      "Requirement already satisfied: readthedocs-sphinx-search<0.4.0,>=0.1.1 in /srv/conda/envs/notebook/lib/python3.10/site-packages (from pyelastica[docs,examples]) (0.3.2)\n",
      "Requirement already satisfied: sphinx-autodoc-typehints<2.0,>=1.21 in /srv/conda/envs/notebook/lib/python3.10/site-packages (from pyelastica[docs,examples]) (1.23.0)\n",
      "Requirement already satisfied: sphinx-book-theme<2.0,>=1.0 in /srv/conda/envs/notebook/lib/python3.10/site-packages (from pyelastica[docs,examples]) (1.1.4)\n",
      "Requirement already satisfied: cma<4.0.0,>=3.2.2 in /srv/conda/envs/notebook/lib/python3.10/site-packages (from pyelastica[docs,examples]) (3.4.0)\n",
      "Requirement already satisfied: contourpy>=1.0.1 in /srv/conda/envs/notebook/lib/python3.10/site-packages (from matplotlib<4.0.0,>=3.3.2->pyelastica[docs,examples]) (1.3.2)\n",
      "Requirement already satisfied: cycler>=0.10 in /srv/conda/envs/notebook/lib/python3.10/site-packages (from matplotlib<4.0.0,>=3.3.2->pyelastica[docs,examples]) (0.12.1)\n",
      "Requirement already satisfied: fonttools>=4.22.0 in /srv/conda/envs/notebook/lib/python3.10/site-packages (from matplotlib<4.0.0,>=3.3.2->pyelastica[docs,examples]) (4.58.1)\n",
      "Requirement already satisfied: kiwisolver>=1.3.1 in /srv/conda/envs/notebook/lib/python3.10/site-packages (from matplotlib<4.0.0,>=3.3.2->pyelastica[docs,examples]) (1.4.8)\n",
      "Requirement already satisfied: packaging>=20.0 in /srv/conda/envs/notebook/lib/python3.10/site-packages (from matplotlib<4.0.0,>=3.3.2->pyelastica[docs,examples]) (24.2)\n",
      "Requirement already satisfied: pillow>=8 in /srv/conda/envs/notebook/lib/python3.10/site-packages (from matplotlib<4.0.0,>=3.3.2->pyelastica[docs,examples]) (11.2.1)\n",
      "Requirement already satisfied: pyparsing>=2.3.1 in /srv/conda/envs/notebook/lib/python3.10/site-packages (from matplotlib<4.0.0,>=3.3.2->pyelastica[docs,examples]) (3.2.3)\n",
      "Requirement already satisfied: python-dateutil>=2.7 in /srv/conda/envs/notebook/lib/python3.10/site-packages (from matplotlib<4.0.0,>=3.3.2->pyelastica[docs,examples]) (2.9.0.post0)\n",
      "Requirement already satisfied: jinja2 in /srv/conda/envs/notebook/lib/python3.10/site-packages (from myst-parser<2.0,>=1.0->pyelastica[docs,examples]) (3.1.5)\n",
      "Requirement already satisfied: markdown-it-py<3.0.0,>=1.0.0 in /srv/conda/envs/notebook/lib/python3.10/site-packages (from myst-parser<2.0,>=1.0->pyelastica[docs,examples]) (2.2.0)\n",
      "Requirement already satisfied: mdit-py-plugins~=0.3.4 in /srv/conda/envs/notebook/lib/python3.10/site-packages (from myst-parser<2.0,>=1.0->pyelastica[docs,examples]) (0.3.5)\n",
      "Requirement already satisfied: pyyaml in /srv/conda/envs/notebook/lib/python3.10/site-packages (from myst-parser<2.0,>=1.0->pyelastica[docs,examples]) (6.0.2)\n",
      "Requirement already satisfied: llvmlite<0.41,>=0.40.0dev0 in /srv/conda/envs/notebook/lib/python3.10/site-packages (from numba<0.58.0,>=0.57.0->pyelastica[docs,examples]) (0.40.1)\n",
      "Requirement already satisfied: tabulate>=0.8.10 in /srv/conda/envs/notebook/lib/python3.10/site-packages (from numpydoc<2.0.0,>=1.3.1->pyelastica[docs,examples]) (0.9.0)\n",
      "Requirement already satisfied: tomli>=1.1.0 in /srv/conda/envs/notebook/lib/python3.10/site-packages (from numpydoc<2.0.0,>=1.3.1->pyelastica[docs,examples]) (2.2.1)\n",
      "Requirement already satisfied: pooch in /srv/conda/envs/notebook/lib/python3.10/site-packages (from pyvista<0.40.0,>=0.39.1->pyelastica[docs,examples]) (1.8.2)\n",
      "Requirement already satisfied: scooby>=0.5.1 in /srv/conda/envs/notebook/lib/python3.10/site-packages (from pyvista<0.40.0,>=0.39.1->pyelastica[docs,examples]) (0.10.1)\n",
      "Requirement already satisfied: vtk in /srv/conda/envs/notebook/lib/python3.10/site-packages (from pyvista<0.40.0,>=0.39.1->pyelastica[docs,examples]) (9.4.2)\n",
      "Requirement already satisfied: sphinxcontrib-applehelp in /srv/conda/envs/notebook/lib/python3.10/site-packages (from Sphinx<7.0,>=6.1->pyelastica[docs,examples]) (2.0.0)\n",
      "Requirement already satisfied: sphinxcontrib-devhelp in /srv/conda/envs/notebook/lib/python3.10/site-packages (from Sphinx<7.0,>=6.1->pyelastica[docs,examples]) (2.0.0)\n",
      "Requirement already satisfied: sphinxcontrib-jsmath in /srv/conda/envs/notebook/lib/python3.10/site-packages (from Sphinx<7.0,>=6.1->pyelastica[docs,examples]) (1.0.1)\n",
      "Requirement already satisfied: sphinxcontrib-htmlhelp>=2.0.0 in /srv/conda/envs/notebook/lib/python3.10/site-packages (from Sphinx<7.0,>=6.1->pyelastica[docs,examples]) (2.1.0)\n",
      "Requirement already satisfied: sphinxcontrib-serializinghtml>=1.1.5 in /srv/conda/envs/notebook/lib/python3.10/site-packages (from Sphinx<7.0,>=6.1->pyelastica[docs,examples]) (2.0.0)\n",
      "Requirement already satisfied: sphinxcontrib-qthelp in /srv/conda/envs/notebook/lib/python3.10/site-packages (from Sphinx<7.0,>=6.1->pyelastica[docs,examples]) (2.0.0)\n",
      "Requirement already satisfied: Pygments>=2.13 in /srv/conda/envs/notebook/lib/python3.10/site-packages (from Sphinx<7.0,>=6.1->pyelastica[docs,examples]) (2.19.1)\n",
      "Requirement already satisfied: snowballstemmer>=2.0 in /srv/conda/envs/notebook/lib/python3.10/site-packages (from Sphinx<7.0,>=6.1->pyelastica[docs,examples]) (3.0.1)\n",
      "Requirement already satisfied: babel>=2.9 in /srv/conda/envs/notebook/lib/python3.10/site-packages (from Sphinx<7.0,>=6.1->pyelastica[docs,examples]) (2.17.0)\n",
      "Requirement already satisfied: alabaster<0.8,>=0.7 in /srv/conda/envs/notebook/lib/python3.10/site-packages (from Sphinx<7.0,>=6.1->pyelastica[docs,examples]) (0.7.16)\n",
      "Requirement already satisfied: imagesize>=1.3 in /srv/conda/envs/notebook/lib/python3.10/site-packages (from Sphinx<7.0,>=6.1->pyelastica[docs,examples]) (1.4.1)\n",
      "Requirement already satisfied: requests>=2.25.0 in /srv/conda/envs/notebook/lib/python3.10/site-packages (from Sphinx<7.0,>=6.1->pyelastica[docs,examples]) (2.32.3)\n",
      "Requirement already satisfied: pydata-sphinx-theme==0.15.4 in /srv/conda/envs/notebook/lib/python3.10/site-packages (from sphinx-book-theme<2.0,>=1.0->pyelastica[docs,examples]) (0.15.4)\n",
      "Requirement already satisfied: beautifulsoup4 in /srv/conda/envs/notebook/lib/python3.10/site-packages (from pydata-sphinx-theme==0.15.4->sphinx-book-theme<2.0,>=1.0->pyelastica[docs,examples]) (4.13.3)\n",
      "Requirement already satisfied: accessible-pygments in /srv/conda/envs/notebook/lib/python3.10/site-packages (from pydata-sphinx-theme==0.15.4->sphinx-book-theme<2.0,>=1.0->pyelastica[docs,examples]) (0.0.5)\n",
      "Requirement already satisfied: typing-extensions in /srv/conda/envs/notebook/lib/python3.10/site-packages (from pydata-sphinx-theme==0.15.4->sphinx-book-theme<2.0,>=1.0->pyelastica[docs,examples]) (4.12.2)\n",
      "Requirement already satisfied: MarkupSafe>=2.0 in /srv/conda/envs/notebook/lib/python3.10/site-packages (from jinja2->myst-parser<2.0,>=1.0->pyelastica[docs,examples]) (3.0.2)\n",
      "Requirement already satisfied: mdurl~=0.1 in /srv/conda/envs/notebook/lib/python3.10/site-packages (from markdown-it-py<3.0.0,>=1.0.0->myst-parser<2.0,>=1.0->pyelastica[docs,examples]) (0.1.2)\n",
      "Requirement already satisfied: six>=1.5 in /srv/conda/envs/notebook/lib/python3.10/site-packages (from python-dateutil>=2.7->matplotlib<4.0.0,>=3.3.2->pyelastica[docs,examples]) (1.17.0)\n",
      "Requirement already satisfied: charset_normalizer<4,>=2 in /srv/conda/envs/notebook/lib/python3.10/site-packages (from requests>=2.25.0->Sphinx<7.0,>=6.1->pyelastica[docs,examples]) (3.4.1)\n",
      "Requirement already satisfied: idna<4,>=2.5 in /srv/conda/envs/notebook/lib/python3.10/site-packages (from requests>=2.25.0->Sphinx<7.0,>=6.1->pyelastica[docs,examples]) (3.10)\n",
      "Requirement already satisfied: urllib3<3,>=1.21.1 in /srv/conda/envs/notebook/lib/python3.10/site-packages (from requests>=2.25.0->Sphinx<7.0,>=6.1->pyelastica[docs,examples]) (2.3.0)\n",
      "Requirement already satisfied: certifi>=2017.4.17 in /srv/conda/envs/notebook/lib/python3.10/site-packages (from requests>=2.25.0->Sphinx<7.0,>=6.1->pyelastica[docs,examples]) (2024.12.14)\n",
      "Requirement already satisfied: platformdirs>=2.5.0 in /srv/conda/envs/notebook/lib/python3.10/site-packages (from pooch->pyvista<0.40.0,>=0.39.1->pyelastica[docs,examples]) (4.3.6)\n",
      "Requirement already satisfied: soupsieve>1.2 in /srv/conda/envs/notebook/lib/python3.10/site-packages (from beautifulsoup4->pydata-sphinx-theme==0.15.4->sphinx-book-theme<2.0,>=1.0->pyelastica[docs,examples]) (2.5)\n"
     ]
    }
   ],
   "source": [
    "!pip install \"pyelastica[examples,docs]\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "a354a01d-812d-4bb1-b19f-ebc0624f4ff2",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 20000/20000 [00:01<00:00, 16438.25it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Final time of simulation is :  2.000000000002008\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from collections import defaultdict\n",
    "\n",
    "from elastica.modules import BaseSystemCollection, Constraints, Forcing, Damping\n",
    "from elastica.rod.cosserat_rod import CosseratRod\n",
    "from elastica.dissipation import AnalyticalLinearDamper\n",
    "from elastica.boundary_conditions import OneEndFixedRod\n",
    "from elastica.external_forces import NoForces\n",
    "from elastica.callback_functions import CallBackBaseClass\n",
    "from elastica.timestepper.symplectic_steppers import PositionVerlet\n",
    "from elastica.timestepper import integrate\n",
    "\n",
    "#Setup simulation\n",
    "class SingleSectionCableSimulator(BaseSystemCollection, Constraints, Forcing, Damping):\n",
    "    pass\n",
    "\n",
    "sim = SingleSectionCableSimulator()\n",
    "\n",
    "#Create rod\n",
    "n_elem = 50\n",
    "length = 0.5\n",
    "radius = 0.01\n",
    "start = np.zeros((3,))\n",
    "direction = np.array([0.0, 0.0, 1.0])\n",
    "normal = np.array([0.0, 1.0, 0.0])\n",
    "density = 1000\n",
    "E = 1e6\n",
    "poisson_ratio = 0.5\n",
    "shear_modulus = E / (2 * (1 + poisson_ratio))\n",
    "\n",
    "rod = CosseratRod.straight_rod(\n",
    "    n_elements=n_elem,\n",
    "    start=start,\n",
    "    direction=direction,\n",
    "    normal=normal,\n",
    "    base_length=length,\n",
    "    base_radius=radius,\n",
    "    density=density,\n",
    "    youngs_modulus=E,\n",
    "    shear_modulus=shear_modulus,\n",
    ")\n",
    "sim.append(rod)\n",
    "\n",
    "#Boundary conditions\n",
    "sim.constrain(rod).using(OneEndFixedRod, constrained_position_idx=(0,), constrained_director_idx=(0,))\n",
    "\n",
    "#Tendon forces\n",
    "class TendonForces(NoForces):\n",
    "    def __init__(self, rod, tension=2.0):\n",
    "        self.rod = rod\n",
    "        self.tension = tension\n",
    "        self.indices = range(10, rod.n_elems, 10)\n",
    "\n",
    "    def apply_forces(self, system, time: float = 0.0):\n",
    "        for i in self.indices:\n",
    "            direction = self.rod.tangents[:, i]\n",
    "            self.rod.external_forces[:, i] += self.tension * direction\n",
    "\n",
    "sim.add_forcing_to(rod).using(TendonForces, rod, tension=2.0)\n",
    "\n",
    "#Damping\n",
    "dl = length / n_elem\n",
    "dt = 0.01 * dl\n",
    "sim.dampen(rod).using(AnalyticalLinearDamper, damping_constant=1e-2, time_step=dt)\n",
    "\n",
    "#Callback\n",
    "class PositionCallback(CallBackBaseClass):\n",
    "    def __init__(self, step_skip, callback_params):\n",
    "        super().__init__()\n",
    "        self.every = step_skip\n",
    "        self.callback_params = callback_params\n",
    "\n",
    "    def make_callback(self, system, time, current_step):\n",
    "        if current_step % self.every == 0:\n",
    "            self.callback_params[\"time\"].append(time)\n",
    "            self.callback_params[\"positions\"].append(system.position_collection.copy())\n",
    "\n",
    "history = defaultdict(list)\n",
    "rod.callback_params = history\n",
    "rod.callback_class = PositionCallback(step_skip=100, callback_params=history)\n",
    "\n",
    "#Finalize and integrate\n",
    "sim.finalize()\n",
    "final_time = 2.0\n",
    "total_steps = int(final_time / dt)\n",
    "integrate(PositionVerlet(), sim, final_time, total_steps)\n",
    "\n",
    "#Plot\n",
    "final_pos = rod.position_collection\n",
    "plt.plot(final_pos[0], final_pos[2], label=\"Final Shape\")\n",
    "plt.xlabel(\"X\")\n",
    "plt.ylabel(\"Z\")\n",
    "plt.title(\"Single Section Tendon-Driven Continuum Robot\")\n",
    "plt.grid()\n",
    "plt.axis(\"equal\")\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "7d370582-6360-40a2-b09b-def9297c7b7a",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 999999/999999 [01:12<00:00, 13839.47it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Final time of simulation is :  1.0000000000054297\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from collections import defaultdict\n",
    "\n",
    "from elastica.modules import BaseSystemCollection, Constraints, Forcing, Damping\n",
    "from elastica.rod.cosserat_rod import CosseratRod\n",
    "from elastica.dissipation import AnalyticalLinearDamper\n",
    "from elastica.boundary_conditions import OneEndFixedRod\n",
    "from elastica.external_forces import NoForces\n",
    "from elastica.callback_functions import CallBackBaseClass\n",
    "from elastica.timestepper.symplectic_steppers import PositionVerlet\n",
    "from elastica.timestepper import integrate\n",
    "\n",
    "\n",
    "#Setup simulation\n",
    "class DoubleSectionCableSimulator(BaseSystemCollection, Constraints, Forcing, Damping):\n",
    "    pass\n",
    "\n",
    "sim = DoubleSectionCableSimulator()\n",
    "\n",
    "#Create rods\n",
    "n_elem = 50\n",
    "length = 0.5\n",
    "radius = 0.01\n",
    "density = 1000\n",
    "E = 1e6\n",
    "poisson_ratio = 0.5\n",
    "shear_modulus = E / (2 * (1 + poisson_ratio))\n",
    "\n",
    "normal = np.array([0.0, 1.0, 0.0])\n",
    "direction = np.array([0.0, 0.0, 1.0])\n",
    "\n",
    "#First section\n",
    "start_1 = np.zeros((3,))\n",
    "rod1 = CosseratRod.straight_rod(\n",
    "    n_elements=n_elem,\n",
    "    start=start_1,\n",
    "    direction=direction,\n",
    "    normal=normal,\n",
    "    base_length=length,\n",
    "    base_radius=radius,\n",
    "    density=density,\n",
    "    youngs_modulus=E,\n",
    "    shear_modulus=shear_modulus,\n",
    ")\n",
    "sim.append(rod1)\n",
    "\n",
    "#Second section - starts at end of first\n",
    "start_2 = start_1 + direction * length\n",
    "rod2 = CosseratRod.straight_rod(\n",
    "    n_elements=n_elem,\n",
    "    start=start_2,\n",
    "    direction=direction,\n",
    "    normal=normal,\n",
    "    base_length=length,\n",
    "    base_radius=radius,\n",
    "    density=density,\n",
    "    youngs_modulus=E,\n",
    "    shear_modulus=shear_modulus,\n",
    ")\n",
    "sim.append(rod2)\n",
    "\n",
    "#Boundary conditions\n",
    "sim.constrain(rod1).using(OneEndFixedRod, constrained_position_idx=(0,), constrained_director_idx=(0,))\n",
    "\n",
    "#Tendon forces\n",
    "class TendonForces(NoForces):\n",
    "    def __init__(self, rod, tension=2.0):\n",
    "        self.rod = rod\n",
    "        self.tension = tension\n",
    "        self.indices = range(10, rod.n_elems, 10)\n",
    "\n",
    "    def apply_forces(self, system, time: float = 0.0):\n",
    "        for i in self.indices:\n",
    "            direction = self.rod.tangents[:, i]\n",
    "            self.rod.external_forces[:, i] += self.tension * direction\n",
    "\n",
    "#tendon forces to each section independently\n",
    "sim.add_forcing_to(rod1).using(TendonForces, rod1, tension=2.0)\n",
    "sim.add_forcing_to(rod2).using(TendonForces, rod2, tension=1.5)\n",
    "\n",
    "#Damping\n",
    "dl = length / n_elem\n",
    "dt = 0.0001 * dl\n",
    "sim.dampen(rod1).using(AnalyticalLinearDamper, damping_constant=1e-2, time_step=dt)\n",
    "sim.dampen(rod2).using(AnalyticalLinearDamper, damping_constant=1e-2, time_step=dt)\n",
    "\n",
    "#Callback\n",
    "history = defaultdict(list)\n",
    "\n",
    "class PositionCallback(CallBackBaseClass):\n",
    "    def __init__(self, step_skip, callback_params):\n",
    "        super().__init__()\n",
    "        self.every = step_skip\n",
    "        self.callback_params = callback_params\n",
    "\n",
    "    def make_callback(self, system, time, current_step):\n",
    "        if current_step % self.every == 0:\n",
    "            self.callback_params[\"time\"].append(time)\n",
    "            self.callback_params[\"positions\"].append(system.position_collection.copy())\n",
    "\n",
    "#Attach to rod2\n",
    "rod2.callback_params = history\n",
    "rod2.callback_class = PositionCallback(step_skip=100, callback_params=history)\n",
    "\n",
    "#Finalize and integrate\n",
    "sim.finalize()\n",
    "final_time = 1.0\n",
    "total_steps = int(final_time / dt)\n",
    "integrate(PositionVerlet(), sim, final_time, total_steps)\n",
    "\n",
    "#Plot\n",
    "plt.plot(rod1.position_collection[0], rod1.position_collection[2], label=\"Section 1\")\n",
    "plt.plot(rod2.position_collection[0], rod2.position_collection[2], label=\"Section 2\")\n",
    "plt.xlabel(\"X\")\n",
    "plt.ylabel(\"Z\")\n",
    "plt.title(\"Double Section Tendon-Driven Continuum Robot\")\n",
    "plt.grid()\n",
    "plt.axis(\"equal\")\n",
    "plt.legend()\n",
    "plt.show()\n",
    "#x, y, z = rod.position_collection\n",
    "#fig = plt.figure()\n",
    "#ax = fig.add_subplot(111, projection='3d')\n",
    "#ax.plot(x, y, z)\n",
    "#ax.set_xlabel(\"X\")\n",
    "#ax.set_ylabel(\"Y\")\n",
    "#ax.set_zlabel(\"Z\")\n",
    "#plt.title(\"Double Section Tendon-Driven Continuum Robot\")\n",
    "#plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b2a9998e-a72b-4755-a0ae-47faf6ce30c0",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
